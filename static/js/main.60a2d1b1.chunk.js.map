{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","response","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","err","console","log","handleOnClick","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","origin","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","orignal_name","overview","substr","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.60a2d1b1.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, {useState, useEffect} from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from \"movie-trailer\";\r\n\r\nconst baseUrl = \"https://image.tmdb.org/t/p/original\";\r\n\r\nfunction Row({title,fetchUrl,isLargeRow}) {\r\n\r\n    const [movies,setMovies] = useState([]);\r\n    const [trailerUrl,setTrailerUrl] = useState(\"\");\r\n\r\n    useEffect(()=>{\r\n        async function fetchData() {\r\n            const response = await axios.get(fetchUrl);\r\n            setMovies(response.data.results);\r\n        }\r\n\r\n        fetchData();\r\n\r\n    },[fetchUrl]);\r\n\r\n    const handleOnClick = (movie) => {\r\n        if(trailerUrl){\r\n            setTrailerUrl(\"\");\r\n        }\r\n        else{\r\n            movieTrailer(movie.name || \"\")\r\n            .then(url => {\r\n                const urlParams = new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(err => console.log(err));\r\n        }\r\n    }\r\n \r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map(movie => {\r\n                    return <img \r\n                            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                            onClick={()=>handleOnClick(movie)} \r\n                            key={movie.id} \r\n                            src={`${baseUrl}${isLargeRow?movie.poster_path:movie.backdrop_path}`} \r\n                            alt={movie.name} \r\n                            />\r\n                })}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={{height:\"390\",width:\"100%\",playerVars:{autoplay:1,origin:'http://localhost:3000'}}} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row;","const API_KEY = \"9d2bff12ed955c7f1f74b83187f188ae\";//\"19f84e11932abbc79e6d832d6d1045\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nimport './Banner.css';\r\n\r\nfunction Banner(){\r\n\r\n    const [movie,setMovie] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        async function fetchData() {\r\n            const response = await axios.get(requests.fetchNetflixOriginals);\r\n            setMovie(\r\n               response.data.results[\r\n                   Math.floor(Math.random() * response.data.results.length - 1)\r\n                ]\r\n            );\r\n        }\r\n\r\n        fetchData();\r\n    },[]);\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n? str.substr(0,n-1) + \"...\" : str;\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition: \"center center\"\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.orignal_name}\r\n                </h1>\r\n\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css';\r\n\r\nfunction Nav() {\r\n\r\n    const [show,setShow] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\", () => {\r\n            if(window.scrollY > 100 ){\r\n                setShow(true);\r\n            }\r\n            else{\r\n                setShow(false);\r\n            }\r\n        })\r\n        return () => {\r\n            window.removeEventListener(\"scroll\");\r\n        };\r\n    },[]);\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n            <img\r\n                className=\"nav__avatar\"\r\n                src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n                alt=\"Netflix Logo\"\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React from 'react';\nimport './App.css';\n\nimport Row from './Row';\nimport requests from './requests';\nimport Banner from './Banner';\nimport Nav from './Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Acton Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}